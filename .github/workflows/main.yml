# .github/workflows/main.yml
# Workflow utama yang mencakup testing, linting, dan deployment

name: PLTS IoT CI/CD Pipeline

# Tentukan kapan workflow ini akan dijalankan
on:
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main, development ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    # Service containers untuk MongoDB
    services:
      mongodb:
        image: mongo:4.4
        ports:
          - 27017:27017

    strategy:
      matrix:
        # Test dengan multiple versi Python
        python-version: [3.9, 3.10, 3.11, 3.12]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install

    - name: Run linting
      run: |
        poetry run flake8 .
        poetry run black . --check
        poetry run isort . --check-only

    - name: Run tests with pytest
      run: |
        poetry run pytest tests/ --cov=src --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  build-frontend:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      working-directory: ./frontend
      run: npm install

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

    - name: Upload frontend artifact
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/dist

  deploy:
    needs: [test, build-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' # Hanya deploy dari branch main
    
    steps:
    - uses: actions/checkout@v3

    - name: Download frontend build
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: frontend/dist

    - name: Deploy to production
      env:
        DEPLOY_KEY: ${{ secrets.DEPLOY_SSH_KEY }}
      run: |
        # Script deployment ke server produksi
        echo "$DEPLOY_KEY" > deploy_key
        chmod 600 deploy_key
        rsync -avz -e "ssh -i deploy_key" \
          --exclude='.git*' \
          --exclude='node_modules' \
          ./ user@your-server:/path/to/production/

    - name: Post-deployment tasks
      run: |
        # Restart services
        ssh -i deploy_key user@your-server 'sudo systemctl restart plts-backend'
        # Verify deployment
        curl -f https://your-domain/health